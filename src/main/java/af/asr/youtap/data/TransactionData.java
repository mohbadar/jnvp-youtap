package af.asr.youtap.data;

public class TransactionData {

    /**
     * Describes the searched transaction type
     *
     * MERCHANTTRANSACTION
     */
    private String transactionType;

    /**
     * Last financial transaction’s date and time
     * YYYY MMDDhhmmss
     */
    private String transactionDate;

    /**
     *  *Status code values 2 and 3 are displayed
     *  * and code values 1 and 4 are printed.
     *  * 0 – Successful
     *  * 1 – System error
     *  * 2 – Provisioning error
     *  * 3 – Input error
     *  * 4 – Declined
     *  * If the status is not successful the Message
     *  * field must be present in the response
     *  * message explaining the error.
     */
    private int status;

    /**
     * If the status is non-zero then this
     * parameter is sent and could be
     * displayed/printed on the client device.
     */
    private String searchTxnMessage;


    private String customerId;
    private String merchantId;
    /**
     * DMM – send money or Forex lookup
     * TOPUP – Topup
     * BILL – Bill payment
     * Merchant local transactions:
     * C2MP – (payment) money transfer from a
     * customer’s mobile money account to a
     * merchants account
     * C2MW – (withdrawal) money transfer from
     * a customer’s mobile money account to a
     * merchants account
     * C2MD – cash deposit from customer to
     * merchant
     * C2CW – transfer from a customer’s mobile
     * money account to the customers linked
     * bank account
     * C2CD – transfer from a customer’s linked
     * bank account to a customer’s mobile
     * money account
     * M2CT – Subscriber uses mobile money
     * account to purchase mobile phone airtime
     * top-up.
     * PINTOP– Subscriber uses mobile money
     * account to purchase mobile phone airtime
     * top-up voucher/PIN.
     * SNDMON – Subscriber uses mobile
     * money account to send money to other
     * subscribers or non-subscribers
     * CSHTOP – Subscriber uses Cash to send
     * mobile phone airtime to any mobile phone
     * user including himself/herself
     * CSHVOUT - Subscriber transfers a cash
     * amount to a non-mobile money subscriber
     * CSHVOUR – Non-mobile money wishes to
     * withdraw from a cash amount previously
     * transferred to him/her.
     * CP2MP – Prepaid card purchase
     * INTXF – Mei Tan
     * OUTTXF - Mei Tan
     * C2CD - Mei Tan
     */
    private String paymentType;

    /**
     * Transaction ID number generated by a
     * third party system the used to trace a
     * transaction.
     */
    private long paymentTrailId;

    /**
     * Three character ISO4217 currency code
     * If a source and destination currency is
     * used this holds the currency that the
     * amount was entered in
     */
    private int workingCurrency;

    /**
     * Transaction amount in the specified
     * currency
     */
    private double workingAmount;

    private TransactionData(Builder builder)
    {
        this.transactionType = builder.transactionType;
        this.transactionDate = builder.transactionDate;
        this.status = builder.status;
        this.searchTxnMessage = builder.searchTxnMessage;
        this.customerId = builder.customerId;
        this.merchantId = builder.merchantId;
        this.paymentType = builder.paymentType;
        this.paymentTrailId = builder.paymentTrailId;
        this.workingCurrency = builder.workingCurrency;
        this.workingAmount = builder.workingAmount;
    }

    public static class Builder{

        private String transactionType;
        private String transactionDate;
        private int status;
        private String searchTxnMessage;
        private String customerId;
        private String merchantId;
        private String paymentType;
        private long paymentTrailId;
        private int workingCurrency;
        private double workingAmount;


        public static Builder newInstance()
        {
            return new Builder();
        }

        public Builder withTransactionType(String transactionType)
        {
            this.transactionType = transactionType;
            return this;
        }

        public Builder withTransactionDate (String transactionDate)
        {
            this.transactionDate = transactionDate;
            return this;
        }

        public Builder withStatus(int status)
        {
            this.status = status;
            return this;
        }

        public Builder withSearchTxnMessage(String searchTxnMessage)
        {
            this.searchTxnMessage = searchTxnMessage;
            return this;
        }

        public Builder withCustomerId(String customerId)
        {
            this.customerId = customerId;
            return this;
        }

        public Builder withMerchantId(String merchantId)
        {
            this.merchantId = merchantId;
            return this;
        }

        public Builder withPaymentType(String paymentType)
        {
            this.paymentType = paymentType;
            return this;
        }

        public Builder withPaymentTrailId(long paymentTrailId)
        {
            this.paymentTrailId = paymentTrailId;
            return this;
        }

        public Builder withWorkingCurrency(int workingCurrency)
        {
            this.workingCurrency = workingCurrency;
            return this;
        }

        public Builder withWorkingAmount(double workingAmount)
        {
            this.workingAmount = workingAmount;
            return this;
        }

        public TransactionData build()
        {
            return new TransactionData(this);
        }
    }

    public String getData()
    {
        return String.format("");
    }
}
